---
title: "fitting exercise"
---

# Load required packages

```{r}
library(dplyr)
library(purrr)
library(ggplot2)
library(here)
library(tidyr)
library(tibble)
library(tidymodels)
library(stringr)
```

# Load the dataset using file.choose()

```{r}
model_data <- read.csv("/Users/valeriasantiago/Documents/arlynsantiago-MADA-portfolio/fitting-exercise/Mavoglurant_A2121_nmpk.csv")
```

# Check dataset using nrow() and ncol()
```{r}
nrow(model_data)
ncol(model_data)
```

# Create plot of DV by time with ID as a group factor

```{r}
# Plotting using ggplot2
p1 <- ggplot(model_data, aes(x = TIME, y = DV, group = ID, color = factor(DOSE))) +
  geom_line() +
  labs(title = "DV vs time with ID As A Group Factor",
       x = "Time",
       y = "DV") + theme_classic()
plot(p1)
```

# Data Cleaning
```{r}
# Filter rows so that OCC = 1 and remove rows where OCC = 2
dc1 <- model_data %>%
  filter(OCC == 1)

# Sum DV of each ID
dc2 <- dc1 %>%
  filter(TIME != 0) %>%  # ! to exclude observations with TIME = 0
  group_by(ID) %>%
  summarise(Y = sum(DV))

# Now data only includes TIME == 0
dc3 <- dc1 %>%
  filter(TIME == 0)

# Use left_join to combine dc2 and dc3 together
dc4 <- left_join(dc2, dc3, by = "ID")

dc5 <- dc4 %>%
  mutate(SEX = factor(SEX),
         RACE = factor(RACE)) %>%
  select(Y, DOSE, AGE, SEX, RACE, WT, HT) # to only include these variables in the dc5 dataframe

str(dc5) # to make sure the combined dataframe inludes the correct variables
```

# EDA

```{r}
# Summary table
summary_model = skimr::skim(dc5) # skimr is used to provide basic data summary 
print(summary_model)

# A bar chart of total drug amount vs age

dc6 <- dc5 %>%
  group_by(AGE) %>% 
  summarize(drug_avg = mean(Y))

p1 <- ggplot(dc6, aes(x = AGE, y = drug_avg)) +
  geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
  labs(title = "Bar chart of Total Drug Amount vs Age",
       x = "Age",
       y = "Total Drug Amount") 
plot(p1)

# scatterplot of total drug amount vs weight

p2 <- ggplot(dc5, aes(x = WT, y = Y)) +
  geom_point() +
  labs(title = "Scatterplot of Total Drug Amount vs Weight",
       x = "Weight",
       y = "Total Drug Level") 
plot(p2)

# boxplot of total drug by dose level
p3 <- ggplot(dc5, aes(x = as.factor(DOSE), y = Y)) + # needed to make dose a factor first
  geom_boxplot() +
  labs(title = "Boxplot of Total Drug Amount vs Dose",
       x = "Dose Level",
       y = "Total Drug Amount") 
plot(p3)

# boxplot of total drug by sex

p4 <- ggplot(dc5, aes(x = as.factor(SEX), y = Y)) + #same thing with sex 
  geom_boxplot() +
  labs(title = "Boxplot of Total Drug Amount vs Sex",
       x = "Sex",
       y = "Total Drug Amount") 
plot(p4)

# bar chart of total drug amount vs race

dc7 <- dc5 %>%
  group_by(RACE) %>%
  summarize(
    mean_Y = mean(Y),
    sd_Y = sd(Y)
  )  


p5 <- ggplot(dc7, aes(x = RACE, y = mean_Y, fill = RACE)) +
  geom_bar(stat = "identity", position = "dodge", alpha = 0.7) +
  geom_errorbar(aes(ymin = mean_Y - sd_Y, ymax = mean_Y + sd_Y)) +
  labs(title = "Bar Chart with Error Bars of Total Drug Level vs Race",
       x = "Race",
       y = "Mean Total Drug Amount") 
plot(p5)
```

# Model Fitting
Using Linear Models...
```{r}
# load required libraries
library(tidymodels)
```

```{r}
# I was so lost so used ChatGPT to fit a linear model to Y using variable of interest (DOSE)
dc5_lm1 <- linear_reg() %>%
  set_engine("lm") %>%
  fit(Y ~ DOSE, data = dc5) # learned that you have to include data = for this one

print(dc5_lm1)

# RMSE and R-squared predictions
dc5_lm1_pred <- predict(dc5_lm1, new_data = dc5) 

dc5_lm1_pred
```

# Plot Y and DOSE
```{r}
# ggplot did not want to cooperate so I am going to try lm

lmY <- lm(Y ~ DOSE, data = dc5)

plot(lmY)
```
# Creating Metrics Using RMSE and R-squared predictions
```{r}
#R-bloggers shows you how to use rmse by hand..
rmse <- sqrt(mean((dc5$Y - predict(lmY, data = dc5))^2))

#rmse = 666.46
rsquared <- cor(dc5$Y,predict(lmY, data = dc5))^2
#rsquared = 0.5156
```

# Creating Logistic Regression Model for Sex and DOSE
```{r}
# using glm 
log_model1 <- glm(SEX ~ DOSE, family = "binomial", data = dc5) #have to tell r that  dependent variable is binary. Best explained in https://stat.ethz.ch/R-manual/R-devel/library/stats/html/family.html however I'm still unsure what ~ means

log_model1
```


